---
import {
  PUBLIC_SITE_TITLE,
  PUBLIC_SITE_DESCRIPTION,
  PUBLIC_GA_TRACKING_ID,
} from "../server-constants.ts";
import "../styles/global.css";
import "../styles/syntax-coloring.css";
import GoogleAnalytics from "../components/GoogleAnalytics.astro";

export interface Props {
  title: string;
  desctiption: string;
  path: string;
}

const { title = "", description = "", path = "/" } = Astro.props;

const siteTitle = title ? `${title} - ${PUBLIC_SITE_TITLE}` : PUBLIC_SITE_TITLE;
const siteDescription = description ? description : PUBLIC_SITE_DESCRIPTION;
const siteURL = new URL(path, Astro.site).toString();
const siteOGImage = new URL("/default-og-image.png", Astro.site);

const navItems = [
  { label: "Home", path: "/" },
  { label: "Blog", path: "/blog" },
];
---

<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#" data-theme="light">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={PUBLIC_SITE_TITLE} />
    <meta property="og:image" content={siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <header class="header">
      <h1>
        <a href="/">{PUBLIC_SITE_TITLE}</a>
      </h1>

      <nav class="header-nav">
        <ul>
          {
            navItems.map(({ label, path: p }) => (
              <li key={label}>
                <a href={p} class={p === path ? "active" : null}>
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
        <div class="check">
          <input type="checkbox" id="switch" name="theme" /><label for="switch"
          ></label>
        </div>
      </nav>
    </header>
    <div class="container">
      <slot />
    </div>
    <footer class="footer">
      <div>
        <span>Powered by</span>
        <a href="https://github.com/otoyo/astro-notion-blog"
          >astro-notion-blog</a
        >
      </div>
    </footer>
  </body>
</html>

<style>
  .header {
    display: block;
    padding: 15px 0;
    text-align: center;
  }
  .header h1 {
    padding: 0.5rem 0;
    font-weight: 400;
  }
  .header h1 a {
    color: inherit;
  }
  .header ul {
    list-style: none;
    margin: inherit;
    padding: 0.5rem 0;
    font-size: 1.1rem;
  }
  @media (max-width: 640px) {
    .header ul {
      font-size: 1rem;
    }
  }
  .header ul li {
    display: inline-block;
    padding: 0 15px;
  }
  .header ul li :global(a.active) {
    color: var(--accents-3);
  }

  .header .header-nav {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .container {
    width: 100%;
    padding: 0 5%;
  }

  .footer {
    margin: 40px 0 10px;
    text-align: center;
    font-size: 0.75rem;
  }
  .footer span {
    color: #777;
  }
  .footer span a {
    color: inherit;
  }

  .check {
    position: relative;
  }
  input[type="checkbox"] {
    height: 50px;
    width: 70px;
    border-radius: 30px;
    -webkit-appearance: none;
    outline: none;
    /* background: white; */
    transition: 0.6s ease;
    cursor: pointer;
  }

  input[type="checkbox"]:checked {
    /* background: rgb(61, 61, 61); */
  }
  input[type="checkbox"]::after {
    content: url("https://api.iconify.design/ph/sun.svg?color=%23fb923c&width=35&height=35");
    position: absolute;
    top: 10px;
    right: 20px;
  }
  input[type="checkbox"]:checked::after {
    content: url("https://api.iconify.design/ph/moon.svg?color=white&width=35&height=35");
    position: absolute;
    top: 10px;
    right: 18px;
  }
</style>

<script is:inline>
  let theme = localStorage.getItem("data-theme");
  const changeThemeToDark = () => {
    document.documentElement.setAttribute("data-theme", "dark"); // set theme to dark
    localStorage.setItem("data-theme", "dark"); // save theme to local storage
  };

  const changeThemeToLight = () => {
    document.documentElement.setAttribute("data-theme", "light"); // set theme light
    localStorage.setItem("data-theme", "light"); // save theme to local storage
  };

  const checkbox = document.getElementById("switch");
  // Apply retrived them to the website
  checkbox.addEventListener("change", () => {
    let theme = localStorage.getItem("data-theme"); // Retrieve saved them from local storage
    if (theme === "dark") {
      changeThemeToLight();
    } else {
      changeThemeToDark();
    }
  });
</script>
